// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/count.dart';
import 'models/streak.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1364452685146486954),
      name: 'Streak',
      lastPropertyId: const obx_int.IdUid(4, 2787945016518704895),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7846873932332357119),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8220556922898315814),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2787945016518704895),
            name: 'dbInterval',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'counts', srcEntity: 'Count', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4618448775489027494),
      name: 'Count',
      lastPropertyId: const obx_int.IdUid(8, 4801519771958210271),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 65500660315973313),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2408943094135220943),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5851129747544368323),
            name: 'streakId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 7087276133968963353),
            relationTarget: 'Streak'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4801519771958210271),
            name: 'dbCountState',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 4618448775489027494),
      lastIndexId: const obx_int.IdUid(3, 7087276133968963353),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2330760068852719877, 5993578998911691831],
      retiredIndexUids: const [8360932502398907500, 6837733886811224356],
      retiredPropertyUids: const [
        8394868281841413257,
        5852144933446586966,
        960165285155561647,
        643464918743923611,
        8726458545647828736,
        1695832062399989068,
        315528777935659263,
        655768181242291161,
        1731627768947832573,
        8384775330454895822,
        7848157046580722658,
        4807506222472023369
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Streak: obx_int.EntityDefinition<Streak>(
        model: _entities[0],
        toOneRelations: (Streak object) => [],
        toManyRelations: (Streak object) => {
              obx_int.RelInfo<Count>.toOneBacklink(
                      5, object.id, (Count srcObject) => srcObject.streak):
                  object.counts
            },
        getId: (Streak object) => object.id,
        setId: (Streak object, int id) {
          object.id = id;
        },
        objectToFB: (Streak object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(3, object.dbInterval);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Streak(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbInterval = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 10);
          obx_int.InternalToManyAccess.setRelInfo<Streak>(
              object.counts,
              store,
              obx_int.RelInfo<Count>.toOneBacklink(
                  5, object.id, (Count srcObject) => srcObject.streak));
          return object;
        }),
    Count: obx_int.EntityDefinition<Count>(
        model: _entities[1],
        toOneRelations: (Count object) => [object.streak],
        toManyRelations: (Count object) => {},
        getId: (Count object) => object.id,
        setId: (Count object, int id) {
          object.id = id;
        },
        objectToFB: (Count object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addInt64(4, object.streak.targetId);
          fbb.addInt64(7, object.dbCountState);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final object = Count(date: dateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbCountState = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 18);
          object.streak.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.streak.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Streak] entity fields to define ObjectBox queries.
class Streak_ {
  /// see [Streak.id]
  static final id =
      obx.QueryIntegerProperty<Streak>(_entities[0].properties[0]);

  /// see [Streak.name]
  static final name =
      obx.QueryStringProperty<Streak>(_entities[0].properties[1]);

  /// see [Streak.dbInterval]
  static final dbInterval =
      obx.QueryIntegerProperty<Streak>(_entities[0].properties[2]);

  /// see [Streak.counts]
  static final counts = obx.QueryBacklinkToMany<Count, Streak>(Count_.streak);
}

/// [Count] entity fields to define ObjectBox queries.
class Count_ {
  /// see [Count.id]
  static final id = obx.QueryIntegerProperty<Count>(_entities[1].properties[0]);

  /// see [Count.date]
  static final date = obx.QueryDateProperty<Count>(_entities[1].properties[1]);

  /// see [Count.streak]
  static final streak =
      obx.QueryRelationToOne<Count, Streak>(_entities[1].properties[2]);

  /// see [Count.dbCountState]
  static final dbCountState =
      obx.QueryIntegerProperty<Count>(_entities[1].properties[3]);
}
